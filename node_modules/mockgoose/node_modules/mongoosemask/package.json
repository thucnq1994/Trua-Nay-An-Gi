{
  "name": "mongoosemask",
  "description": "mongoosemask",
  "version": "0.0.6",
  "author": {
    "name": "Anthony McCormick",
    "email": "anthony.mccormick AT gmail.com"
  },
  "keywords": [
    "logger"
  ],
  "scripts": {
    "test": "./node_modules/jasmine-node/bin/jasmine-node test/ --verbose --color --captureExceptions"
  },
  "main": "index",
  "engines": {
    "node": ">=0.6.19"
  },
  "bugs": {
    "url": "https://github.com/mccormicka/mongoosemask/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mccormicka/mongoosemask.git"
  },
  "homepage": "https://github.com/mccormicka/mongoosemask",
  "readmeFilename": "README.md",
  "dependencies": {
    "nodelogger": "https://github.com/mccormicka/nodelogger/archive/master.tar.gz",
    "lodash": "~1.3.1"
  },
  "devDependencies": {
    "grunt": "0.4.1",
    "jasmine-node": "https://github.com/mccormicka/jasmine-node/archive/exclusive-tests.tar.gz",
    "grunt-contrib-watch": "0.3.1",
    "grunt-contrib-jshint": "0.4.3",
    "grunt-jasmine-node": "~0.1.0",
    "mongoose": "~3.6.16",
    "express": "~3.3.5",
    "supertest": "~0.7.1",
    "mockgoose": "~1.0.0"
  },
  "readme": "##MongooseMask\n\nExpress Middleware to filter out Mongoose model attributes.\nYou pass an array of fields you do not want returned as part of\njson or jsonp requests.\n\n###Install\nTo install the latest official version, use NPM:\n\n    npm install mongoosemask --save\n\nTo run the tests and see what is supported run either of the following commands\n\n    npm test\n    grunt\n\n###Usage\n\n    app.use(mongoosemask(['_id', '_privatefield']));\n\nThe '_id' and the '_privatefield' will then be removed from your json objects before sending to the\nclient.\n\n    maksedObj = {\n        //ALL fields except _id and _private\n    };\n\nYou can also call the mask explicitly\n\n    var maskedModel = mongomask.mask(model, ['_id']);\n\nAdditionally there is also a expose method which you can use to expose items instead of excluding them.\n\nMask all values on a given object except for those that\nare explicitly exposed through the values array. The value\ncan be a String which will directly be a one-to-one mapping\nfor example\n\n        _id -> _id will expose the _id mongoose value\n\nor an object that maps keys to values\nfor example\n    {_id:'id'}\n    Will expose _id as id on the object.\n    [ '_id', {_id:'id} ]\n    Will expose both id and _id,\n     {'nested.value.here' : 'exposed.at.any.level'}\n     Will create a sub object {exposed:{at:{any:level:'valuehere'}}}]\n\n    var exposedModel = mongoosemask.expose(model, [{_id:'id'}, {'email':'username'}, 'name', {'nested.value' : 'user.profile' }]);\n     exposedModel = {\n     id:12345,\n     username:'my@email.com',\n     name:'nodejs',\n     user:{\n            profile:'public ...'\n          }\n     }\n\n\n###Notes\nIf you are using 'express-partial-response' you must place this middleware\nAFTER you place the express-partial-response middleware as this middlware only works\nwith mongoose objects which the express-partial-response middleware does not return\n\n###CHANGELOG\n\n###0.0.5\nQuick fix for nested objects.\n\n###0.0.4\nAdded dot'.' notation support to expose/mask methods. The method will try to walk the\nchain until it finds the value to expose/mask.\n\nmask( ['this.sub.value'], model );\nexpose(['this.sub.value', { 'this.sub.value.two' : 'new.position.in.exposed.model' }], model );\n\nIf the expose method can not find the value then it will set it as undefined.\n\nOne limitation is that the dot notation can not traverse a sub array so model.[ {value:value}, {value:value}]\nwill not be able to mask the model.value of the two sub models.\n\n###0.0.3\nAdded the ability to pass a function as the mask callback for the express middleware.\nif you have a complex item that needs masking  you can pass a\ncallback funtion that will be invoked before your object is serialized to json.\n\n The callback must have the following signature.\n function(obj, mask, done);\n\n     express.use(mongooseMask(function(value, mask, done){\n             var masked = mask(value, ['_id', '__v']);\n             if(masked.data){\n                 masked.data = mask(value.data, ['_id', '__v']);\n             }\n             done(null, masked);\n         }));\n\n\n###0.0.6\nFixed NPE when passing nested objects\n\n###0.0.2\nAdded support for calling mask directly.\nAdded expose() method as an inverse of mask.\n \n###0.0.1\nInitial release",
  "_id": "mongoosemask@0.0.6",
  "dist": {
    "shasum": "b34ae80a7466d4a31685bc46857ba161627c1ed2",
    "tarball": "http://registry.npmjs.org/mongoosemask/-/mongoosemask-0.0.6.tgz"
  },
  "_from": "mongoosemask@>=0.0.6 <0.1.0",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "mccormicka",
    "email": "anthony.mccormick@gmail.com"
  },
  "maintainers": [
    {
      "name": "mccormicka",
      "email": "anthony.mccormick@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "b34ae80a7466d4a31685bc46857ba161627c1ed2",
  "_resolved": "https://registry.npmjs.org/mongoosemask/-/mongoosemask-0.0.6.tgz"
}
